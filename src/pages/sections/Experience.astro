---
import TimeLineExperience from "../../components/TimeLineExperience.astro";
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section id="experience" class="flex flex-col">
    <div>
      <h2 class="text-2xl font-bold mb-10">{t('exp.title')}</h2>
      <div class="ml-5">
        <ol class="relative border-s border-gray-200 dark:border-gray-700">
          <TimeLineExperience
            titulo="Accenture"
            rol={t('exp.accenture.rol')}
            icono="briefcase"
            fecha={t('exp.accenture.date')}
          >
            <ul
              class="text-base font-normal text-gray-600 dark:text-gray-300"
            >
              <li><b>{t('exp.accenture.proj1')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.accenture.proj1.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>

              <li><b>{t('exp.accenture.proj2')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.accenture.proj2.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>

              <li><b>{t('exp.accenture.proj3')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.accenture.proj3.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>
            </ul>
          </TimeLineExperience>
          <TimeLineExperience
            titulo="Akra Informática Coop. V."
            rol={t('exp.akra.rol')}
            icono="briefcase"
            fecha={t('exp.akra.date')}
          >
            <ul
              class="text-base font-normal text-gray-600 dark:text-gray-300"
            >
              <li><b>{t('exp.akra.proj1')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.akra.proj1.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>
                
              <li><b>{t('exp.akra.proj2')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.akra.proj2.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
               </li>
              
              <li><b>{t('exp.akra.proj3')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.akra.proj3.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>

              <li><b>{t('exp.akra.proj4')}</b></li>
              <li class="mb-5">
                <ul>
                  {t('exp.akra.proj4.desc').split('|').map((part, index) => (
                    <li>{part}</li>
                  ))}
                </ul>
              </li>
            </ul>
          </TimeLineExperience>
        </ol>
      </div>
    </div>
  </section>

  <script>
    // Se ejecuta cuando Astro ha cargado el DOM
    document.addEventListener("DOMContentLoaded", () => {
      // Selecciona todos los <li> que tengan data-title
      const cards = document.querySelectorAll("li[data-title]");
  
      cards.forEach((card) => {
        // Usa la data original si quieres mostrarla en pantalla
        // const originalTitle = card.dataset.title;
  
        // Pero para los selectores, usa el ID real que construimos en Astro
        // (recordemos que le pusimos expandable-card-<safeTitulo>)
        // Podemos extraer la parte "safeTitulo" desde el id del <li>
        const cardId = card.id.replace("expandable-card-", "");
  
        const toggleButton = card.querySelector(`#toggleButton-${cardId}`) as HTMLElement;
        const detailContainer = card.querySelector(`#detailContainer-${cardId}`) as HTMLElement;
  
        // Añade el evento al botón
        toggleButton.addEventListener("click", () => {
          const isOpen = detailContainer.getAttribute("data-opened") === "true";
  
          if (isOpen) {
            // Cierra (colapsa)
            detailContainer.style.maxHeight = "0px";
            detailContainer.setAttribute("data-opened", "false");

            // Cambiar texto
            toggleButton.textContent = 'Ver proyectos';
          } else {
            // Abre (expande) ajustando la altura al scrollHeight
            detailContainer.style.maxHeight = detailContainer.scrollHeight + "px";
            detailContainer.setAttribute("data-opened", "true");

            // Cambiar texto
            toggleButton.textContent = 'Ocultar proyectos';
          }
        });
      });
    });
  </script>
  